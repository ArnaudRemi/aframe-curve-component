!function(t){function e(n){if(i[n])return i[n].exports;var r=i[n]={exports:{},id:n,loaded:!1};return t[n].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e){function i(t){var e=new THREE.Vector3(0,1,0);return s.setFromUnitVectors(n,t),e.applyQuaternion(s),e}if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");var n=(new THREE.Vector3,new THREE.Vector3,new THREE.Vector3(0,1,0),new THREE.Vector3(0,0,1)),r=THREE.Math.degToRad;AFRAME.registerComponent("curve-point",{schema:{},init:function(){this.el.addEventListener("componentchanged",this.changeHandler.bind(this)),this.el.emit("curve-point-change")},changeHandler:function(t){"position"==t.detail.name&&this.el.emit("curve-point-change")}}),AFRAME.registerComponent("curve",{schema:{type:{type:"string",default:"CatmullRom",oneOf:["CatmullRom","Spline","CubicBezier","QuadraticBezier","Line"]},closed:{type:"boolean",default:!1}},init:function(){this.pathPoints=null},update:function(t){if(this.remove(),this.points=Array.from(this.el.querySelectorAll("a-curve-point, [curve-point]")),this.points.length<=1)return console.warn("At least 2 curve-points needed to draw a curve"),void(this.curve=null);var e=this.points.map(function(t){return void 0!==t.x&&void 0!==t.y&&void 0!==t.z?t:(t.updateComponent("position"),t.object3D.getWorldPosition())});if(this.pathPoints){var i=this.pointPositionsString(e),n=this.pointPositionsString(this.pathPoints);if(i==n)return}if(this.pathPoints=e,this.threeConstructor=THREE[this.data.type+"Curve3"],this.data.type.match(/QuadraticBezier|CubicBezier|Line/))this.curve=Function.prototype.bind.apply(this.threeConstructor,this.pathPoints);else{if(!this.threeConstructor)throw this.pause(),"No Three constructor of type (case sensitive): "+this.data.type+"Curve3";this.curve=new this.threeConstructor(this.pathPoints)}this.curve.closed=this.data.closed,this.el.emit("curve-updated"),this.el.addEventListener("curve-point-change",this.update.bind(this)),this.ready=!0},remove:function(){this.curve=null,this.points=null,this.ready=!1,this.el.removeEventListener("curve-point-change",this.update.bind(this))},closestPointInLocalSpace:function(t,e,n,r){if(!this.ready)throw Error("Curve not instantiated yet.");e=e||.1/this.curve.getLength(),r=r||.5,n=n||.5,r/=2;var s=n+r,o=n-r,a=this.curve.getPointAt(s),c=this.curve.getPointAt(o),u=a.distanceTo(t),h=c.distanceTo(t),d=u<h;if(r<e){var v=this.curve.getTangentAt(d?s:o);if(r<e)return{result:d?s:o,location:d?a:c,distance:d?u:h,normal:i(v),tangent:v}}return u<h?this.closestPointInLocalSpace(t,e,s,r):this.closestPointInLocalSpace(t,e,o,r)},pointPositionsString:function(t){if(t){for(var e="",i=0;i<t.length;i++)e+=AFRAME.utils.coordinates.stringify(t[i]);return e}return""}});var s=new THREE.Quaternion;AFRAME.registerShader("line",{schema:{color:{default:"#ff0000"}},init:function(t){this.material=new THREE.LineBasicMaterial(t)},update:function(t){this.material=new THREE.LineBasicMaterial(t)}}),AFRAME.registerComponent("draw-curve",{schema:{curve:{type:"selector"}},init:function(){this.data.curve.addEventListener("curve-updated",this.update.bind(this))},update:function(){if(this.data.curve&&(this.curve=this.data.curve.components.curve),this.curve&&this.curve.curve){var t=this.el.getOrCreateObject3D("mesh",THREE.Line);lineMaterial=t.material?t.material:new THREE.LineBasicMaterial({color:"#ff0000"});var e=new THREE.Geometry;e.vertices=this.curve.curve.getPoints(10*this.curve.curve.points.length),this.el.setObject3D("mesh",new THREE.Line(e,lineMaterial))}},remove:function(){this.data.curve.removeEventListener("curve-updated",this.update.bind(this)),this.el.getObject3D("mesh").geometry=new THREE.Geometry}}),AFRAME.registerComponent("clone-along-curve",{schema:{curve:{type:"selector"},spacing:{default:1},rotation:{type:"vec3",default:"0 0 0"},scale:{type:"vec3",default:"1 1 1"}},init:function(){this.el.addEventListener("model-loaded",this.update.bind(this)),this.data.curve.addEventListener("curve-updated",this.update.bind(this))},update:function(){if(this.remove(),this.data.curve&&(this.curve=this.data.curve.components.curve),!this.el.getObject3D("clones")&&this.curve&&this.curve.curve){var t=this.el.getObject3D("mesh"),e=this.curve.curve.getLength(),i=0,s=i,o=this.el.getOrCreateObject3D("clones",THREE.Group),a=new THREE.Object3D;for(t.scale.set(this.data.scale.x,this.data.scale.y,this.data.scale.z),t.rotation.set(r(this.data.rotation.x),r(this.data.rotation.y),r(this.data.rotation.z)),t.rotation.order="YXZ",a.add(t);s<=e;){var c=a.clone(!0);c.position.copy(this.curve.curve.getPointAt(s/e)),tangent=this.curve.curve.getTangentAt(s/e).normalize(),c.quaternion.setFromUnitVectors(n,tangent),o.add(c),s+=this.data.spacing}}},remove:function(){this.curve=null,this.el.getObject3D("clones")&&this.el.removeObject3D("clones")}}),AFRAME.registerPrimitive("a-draw-curve",{defaultComponents:{"draw-curve":{}},mappings:{curveref:"draw-curve.curve"}}),AFRAME.registerPrimitive("a-curve-point",{defaultComponents:{"curve-point":{}},mappings:{}}),AFRAME.registerPrimitive("a-curve",{defaultComponents:{curve:{}},mappings:{type:"curve.type"}})}]);